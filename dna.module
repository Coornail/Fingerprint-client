<?php

define('DNA_DEFAULT_DOMAIN', 'http://localhost/dnastore/');
define('DNA_DEFAULT_SERVER', DNA_DEFAULT_DOMAIN .'?q=services/xmlrpc');

/**
 * Implementation of hook_menu()
 */
function dna_menu() {
  $items = array();

  $items['node/%node/dna_send'] = array(
    'title' => 'Send to pronvoix',
    'page callback' => 'dna_send',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_node_is_dna',
    'access arguments' => array(1),
  );

  $items['admin/settings/dna'] = array(
    'title' => 'Dna configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dna_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}


/**
 * System settings form of the module
 */
function dna_settings_form($form_state) {
  $form = array();

  $form['dna_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Server'),
    '#default_value' => variable_get('dna_server', DNA_DEFAULT_SERVER),
    '#required' => TRUE,
  );

  $form['dna_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#description' => t('Username'),
    '#default_value' => variable_get('dna_domain', ''),
    '#required' => TRUE,
  );

  $form['dna_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('dna_password', ''),
    '#required' => TRUE,
  );

  $form['dna_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Api key'),
    '#default_value' => variable_get('dna_key', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Sends the node to the Pronovix server
 *
 * @todo store remote nid
 */
function dna_send($node) {
  $url = variable_get('dna_server', DNA_DEFAULT_SERVER);
  $domain = variable_get('dna_domain', '');
  $key = variable_get('dna_key', '');
  $username = $domain;
  $password = variable_get('dna_password', '');

  if (empty($url) || empty($domain) || empty($key) || empty($password)) {
    return t('First you have to set up your credentials: !url', array('!url' => l('DNA settings', 'admin/settings/dna')));
  }

  module_load_include('inc', 'dna', 'dna_xmlrpc');
  $xmlrpc_handler = new DrupalXmlrpc($domain, $key, $url);
  $user = $xmlrpc_handler->userLogin($username, $password);
  if (!$user) {
    return t('Authentication failed: %message', array('%message' => xmlrpc_error_msg()));
  }

  unset($node->dna);
  unset($node->nid);
  $node->uid = $user->uid;
  $node = $xmlrpc_handler->send('node.save', array($node));
  if (!$node) {
    return t('Failed to save node: %message', array('%message' => xmlrpc_error_msg()));
  }

  // If we own the domain we can provide nice url
  if (strpos($url, DNA_DEFAULT_DOMAIN) !== FALSE) {
    $node_path = DNA_DEFAULT_DOMAIN .'?q=node/'. $node;
    return t('Node saved as !url', array('!url' => l('node/'. $node, $node_path)));
  }

  return t('Node saved as node/%nid', array('%nid' => $node));
}


/**
 * Checks if the node type is dna
 *
 * @return bool True if it's a dna site dump, else otherwise
 *
 */
function _node_is_dna($node) {
  return $node->type == 'dna';
}


/**
 * Implementation of hook_node_info()
 */
function dna_node_info() {
  return array(
    'dna' => array(
      'name' => t('Site dna'),
      'module' => 'dna',
      'description' => t('Export a site dump from exportables'),
      'has_title' => TRUE,
      'has_body' => TRUE,
    )
  );
}


/**
 * Implementation of hook_form().
 * Form for the dna node type
 */
function dna_form(&$node) {
  $form = array();
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#disabled' => TRUE,
    '#value' => isset($node->title) ? $node->title : t('Site dump at @time', array('@time' => time())),
  );

  module_load_include('inc', 'dna', 'dna_settings');

  $exporter = new dna_settings();

  $form['body'] = array(
    '#title' => t('Body'),
    '#type' => 'textarea',
    '#disabled' => TRUE,
    '#value' => isset($node->body) ? $node->body : $exporter->get_output(),
  );

  return $form;
}


/**
 * Implementation of hook_nodeap().
 *
 * @todo make the node load and display nicer
 */
function dna_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type != 'dna') {
    return;
  }

  /**
   * Save the dna before the html filter screws it up
   */
  if ($op == 'load') {
    $node->dna = unserialize($node->body);
  }

  if ($op == 'view') {
    module_load_include('inc', 'dna', 'dna_output_xml');
    $exporter = new dna_xml($node->dna);

    if ($teaser) {
      $exporter->set_modules(array());
      $exporter->set_variables(array());
      $exporter->set_enabled_modules(array());
      $node->content['teaser']['#value'] = dna_xml::format_xml($exporter->get_output());
      $node->content['body'] = '';
    } else {
      $node->content['body']['#value'] = dna_xml::format_xml($exporter->get_output());
    }
  }

}


/**
 * Implementation of hook_perm().
 */
function dna_perm() {
  return array(
    'create dna content',
    'delete own dna content',
    'delete any dna content',
    'edit own dna content',
    'edit any dna content',
  );
}


/**
 * Implementation of hook_access().
 */
function dna_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create dna content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any dna content', $account) || (user_access('edit own dna content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any dna content', $account) || (user_access('delete own dna content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}


/**
 * @see services_get_hash()
 */
function _dna_get_hash($timestamp, $domain, $api_key, $nonce, $method, $args) {
  $hash_parameters = array($timestamp, $domain, $nonce, $method);
  return hash_hmac("sha256", implode(';', $hash_parameters), $api_key);
}

