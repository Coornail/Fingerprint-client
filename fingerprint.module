<?php

define('FINGERPRINT_DEFAULT_DOMAIN', 'http://localhost/dnastore/');
define('FINGERPRINT_DEFAULT_SERVICES_PATH', '?q=services/xmlrpc');
define('FINGERPRINT_DEFAULT_SERVER', FINGERPRINT_DEFAULT_DOMAIN . FINGERPRINT_DEFAULT_SERVICES_PATH);
define('FINGERPRINT_FILTERED_ELEMENT', '[FILTERED]');

define('FINGERPRINT_HIGHLIGHT', TRUE);
define('FINGERPRINT_NOHIGHLIGHT', FALSE);

/**
 * Implementation of hook_menu().
 */
function fingerprint_menu() {
  $items = array();

  $items['node/%node/fingerprint_send'] = array(
    'title' => 'Send to pronovix',
    'page callback' => 'fingerprint_send',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_fingerprint_send_permission',
    'access arguments' => array(1),
    'file' => 'fingerprint.pages.inc',
  );

  $items['admin/settings/fingerprint'] = array(
    'title' => 'Fingerprint configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fingerprint_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
    'file' => 'fingerprint.pages.inc',
  );

  // Diff module integration
  if (module_exists('diiff')) {
    $items['node/%node/fingerprint_diff'] = array(
      'title' => 'Difference between versions',
      'page callback' => 'fingerprint_diff_list',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer site configuration'),
      'file' => 'fingerprint.pages.inc',
    );

    $items['node/%/fingerprint_diff/%'] = array(
      'title' => 'Difference between versions',
      'page callback' => 'fingerprint_view_diff',
      'page arguments' => array(1, 3),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer site configuration'),
      'file' => 'fingerprint.pages.inc',
    );
  }

  return $items;
}


function _fingerprint_send_permission($node) {
  return _node_is_fingerprint($node) && user_access('send fingerprint content trough xmlrpc') && !module_exists('dna_server');
}


/**
 * Checks if the node type is fingerprint
 *
 * @return bool True if it's a fingerprint site dump, false otherwise
 */
function _node_is_fingerprint($node) {
  return $node->type == 'fingerprint';
}


/**
 * Implementation of hook_node_info().
 */
function fingerprint_node_info() {
  return array(
    'fingerprint' => array(
      'name' => t('Site fingerprint'),
      'module' => 'fingerprint',
      'description' => t('Export a site dump from exportables'),
      'has_title' => TRUE,
      'has_body' => TRUE,
    )
  );
}


/**
 * Implementation of hook_form().
 * Form for the fingerprint node type
 */
function fingerprint_form(&$node) {
  $form = array();
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#disabled' => TRUE,
    '#value' => isset($node->title) ? $node->title : t('Site dump at @time', array('@time' => time())),
  );

  module_load_include('inc', 'fingerprint', 'fingerprint_settings');

  $exporter = new FingerprintSettings();

  $form['body'] = array(
    '#title' => t('Body'),
    '#type' => 'textarea',
    '#disabled' => TRUE,
    '#value' => isset($node->body) ? $node->body : $exporter->getOutput(),
  );

  return $form;
}


/**
 * Implementation of hook_nodeap().
 *
 * @todo make the node load and display nicer
 */
function fingerprint_nodeapi(&$node, $op, $teaser, $page, $highlight = FINGERPRINT_HIGHLIGHT) {
  if ($node->type != 'fingerprint') {
    return;
  }

  if ($op == 'load') {
    $node->fingerprint = unserialize($node->body);
    fingerprint_filter_invoke(&$node);
    $node->fingerprint_remote_nid = db_result(db_query('SELECT remote_nid FROM {fingerprint} WHERE nid=%d', $node->nid));
  }

  if ($op == 'view') {
    module_load_include('inc', 'fingerprint', 'fingerprint_output_xml');
    $exporter = new FingerprintXml($node->fingerprint);

    if ($teaser) {
      $exporter->setModules(array());
      $exporter->setVariables(array());
      $exporter->setEnabledModules(array());
      $node->content['teaser']['#value'] = FingerprintXml::formatXml($exporter->getOutput(), $highlight);
      $node->content['body']['#value'] = '';
    }
    else {
      $node->content['body']['#value'] = FingerprintXml::formatXml($exporter->getOutput(), $highlight);
    }
  }

}


/**
 * Implementation of hook_perm().
 */
function fingerprint_perm() {
  return array(
    'access any fingerprint content', // It needs a separate permission, we don't want anyone to see it
    'access own fingerprint content',
    'create fingerprint content',
    'delete own fingerprint content',
    'delete any fingerprint content',
    'edit own fingerprint content',
    'edit any fingerprint content',
    'send fingerprint content trough xmlrpc',
  );
}


/**
 * Implementation of hook_access().
 */
function fingerprint_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create fingerprint content', $account);
    break;

    case 'update':
      return user_access('edit any fingerprint content', $account) ||
        (user_access('edit own fingerprint content', $account) && ($account->uid == $node->uid));
    break;

    case 'delete':
      return user_access('delete any fingerprint content', $account) ||
        (user_access('delete own fingerprint content', $account) && ($account->uid == $node->uid));
    break;

    case 'view':
      return user_access('access any fingerprint content', $account) ||
        (user_access('access own fingerprint content', $account) && ($account->uid == $node->uid));
    break;

    default:
      return FALSE;
    break;
  }

}


/**
 * Implementation of hook_fingerprint_filter().
 *
 * By default it filters:
 * * Site email address
 * * drupal_private_key
 * * Fingerprint settings
 */
function fingerprint_fingerprint_filter() {
  $filter = array(
    'variables' => array(
      'site_mail',
      'drupal_private_key',
      'fingerprint_domain',
      'fingerprint_password',
      'fingerprint_key',
    ),
  );

  return $filter;
}


/**
 * Implementation of hook_help().
 */
function fingerprint_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/fingerprint':
      return '<p>'. t('These configurations are only matter if you want to send your fingerprint to an another website.') . '<br />'
        . t('If you do so, you can check if your settings working at every fingerprint node using the "Send to Pronovix" tab') .'<br />'
        . t('Else you can ignore these settings and start creating a fingerprint at !url', array('!url' => l('Create site fingerprint', 'node/add/fingerprint'))) .'</p>';
  }

}


/**
 * Hook for fingerprint filtering.
 *
 * hook_fingerprint_filter() should return a tree, with the leafs to filter
 * @see fingerprint_fingerprint_filter()
 *
 * @todo Create an interface so the user can do it dynamically
 */
function fingerprint_filter_invoke(&$node) {
  $filter = array();
  foreach (module_implements('fingerprint_filter') as $module) {
    $function = $module .'_fingerprint_filter';
    $filter += $function();
  }

  _fingerprint_filter(&$node->fingerprint, $filter);
}


/**
 * Filters a tree recursively
 * @see fingerprint_filter_invoke()
 */
function _fingerprint_filter(&$tree, $filter) {
  foreach ($filter as $key => &$node) {
    if (is_array($node)) {
      _fingerprint_filter(&$tree[$key], $filter[$key]);
    }
    else {
      if (isset($tree[$node]) && is_array($tree[$node])) {
        _fingerprint_filter_all(&$tree[$node]);
      }
      else {
        $tree[$node] = FINGERPRINT_FILTERED_ELEMENT;
      }
    }
  }
}


/**
 * Filters all leaf in a node
 */
function _fingerprint_filter_all(&$tree) {
  foreach ($tree as $key => &$node) {
    if (is_array($node)) {
      _fingerprint_filter_all($node);
    }
    else {
      $tree[$key] = FINGERPRINT_FILTERED_ELEMENT;
    }
  }
}
